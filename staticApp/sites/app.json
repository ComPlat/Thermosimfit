[{"name":"app.R","content":"library(shiny)\nlibrary(DT)\nlibrary(shinydashboard)\nlibrary(shinyWidgets)\nlibrary(shinyjs)\nlibrary(rootSolve)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(R6)\nlibrary(sensitivity)\nlibrary(openxlsx)\nlibrary(future)\nlibrary(promises)\nlibrary(tsf)\n\nsource(\"server.R\")\nsource(\"ui.R\")","type":"text"},{"name":"server.R","content":"source(\"GDA_App.R\")\nsource(\"HG_App.R\")\nsource(\"IDA_App.R\")\n\nserver <- function(input, output, session) {\n\n  # data import\n  # ============================================================================\n  data <- reactiveValues(df = NULL)\n  output$df <- renderDT({\n      req(input$upload)\n      df <- importData(input$upload$datapath) \n      if (is.data.frame(df)) {\n        if(ncol(df) != 2) {\n          showNotification(\"Data has wrong dimensions two columns were expected\")\n        } else if(nrow(df) == 0) {\n          showNotification(\"Data has 0 rows.\")\n        } else {\n          names(df) <- c(\"var\", \"signal\")\n          data$df <- df\n        }\n      } else {\n        showNotification(\"File can not be used. Upload into R failed!\", duration = 0)\n      }\n  })\n  \n  observeEvent(input$mod, {\n      req(!is.null(data$df))\n      req(is.data.frame(data$df))\n      req(input$op)\n      req(input$new_col)\n      dt <- data$df\n      op <- input$op\n      new_col <- input$new_col\n      new <- NULL\n      err <- NULL\n      e <- try({\n        ast <- getAST(str2lang(op))\n        ast <- ast[[length(ast)]]\n      })\n      if (is(e, \"ErrorClass\")) {\n        showNotification(e$message)\n        return()\n      } else if(inherits(e, \"try-error\")) {\n        showNotification(e)\n        return()\n      }\n      e <- try(\n        new <- with(dt, eval(parse(text = op)))\n      )\n      if (inherits(e, \"try-error\")) {\n        err <- conditionMessage(attr(e, \"condition\"))\n      } else {\n        data$df[, new_col] <- new\n      }\n      output$df <- renderDT(data$df)\n      output$mod_error <- renderText(err)  \n      return(df)\n    })\n  \n\n  HG_com <- Communicator$new()\n  HG_com_sense <- Communicator$new()\n  GDA_com <- Communicator$new()\n  GDA_com_sense <- Communicator$new()\n  IDA_com <- Communicator$new()\n  IDA_com_sense <- Communicator$new()\n  nclicks <- reactiveVal(0)\n  nclicks_sense <- reactiveVal(0)\n\n  hgServer(\"HG\", data$df, HG_com, HG_com_sense, nclicks, nclicks_sense)\n  idaServer(\"IDA\", data$df, IDA_com, IDA_com_sense, nclicks, nclicks_sense)\n  gdaServer(\"GDA\", data$df, GDA_com, GDA_com_sense, nclicks, nclicks_sense)\n\n  onStop(function(){\n    HG_com$destroy()\n    HG_com_sense$destroy()\n    IDA_com$destroy()\n    IDA_com_sense$destroy()\n    GDA_com$destroy()\n    GDA_com_sense$destroy()\n  })\n  \n\n}","type":"text"},{"name":"ui.R","content":"source(\"GDA_App.R\")\nsource(\"HG_App.R\")\nsource(\"IDA_App.R\")\n\nui <- dashboardPage(\n\n  skin = \"blue\",\n\n  dashboardHeader(title = \"Thermosimfit\"),\n  dashboardSidebar(\n    useShinyjs(),\n\n    sidebarMenu(\n      menuItem(\"Data import\", tabName = \"data\", icon = icon(\"table\")),\n      menuItem(\"HG model\", tabName = \"HG\", icon = icon(\"table\")),\n      menuItem(\"GDA model\", tabName = \"GDA\", icon = icon(\"table\")),\n      menuItem(\"IDA model\", tabName = \"IDA\", icon = icon(\"table\"))\n      )\n    ),\n\n  dashboardBody(\n\n    tabItems(\n\n        # data tab\n        # ========================================================================\n      tabItem(\n        tabName = \"data\",\n        box(\n          fileInput(\"upload\", \"Upload a file\"),\n          textInput(\"op\", \"Operations\", value = \"var / 1000\"),\n          textInput(\"new_col\", \"Name of new variable\", value = \"var\"),\n          actionButton(\"mod\", \"Modify\"),\n          verbatimTextOutput(\"mod_error\"),\n          box(\n            DT::DTOutput(\"df\"),  \n            width = 10\n            ),\n          width = 12\n          )\n        ),\n\n      hgUI(\"HG\"),\n      idaUI(\"IDA\"),\n      gdaUI(\"GDA\")\n\n\n      )\n\n    )\n)\n\n","type":"text"},{"name":"GDA_App.R","content":"gdaUI <- function(id) {\n  tabItem(\n           tabName = \"GDA\",\n           tags$script(\n            \"Shiny.addCustomMessageHandler('GDAupdateField', function(message) {\n              var result = message.message;\n              $('#GDA-GDA_output').append(result + '\\\\n');\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('GDAclearField', function(message) {\n              $('#GDA-GDA_output').empty();\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('GDAupdateFieldSense', function(message) {\n              var result = message.message;\n              $('#GDA-GDA_output_sense').html(result);\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('GDAclearFieldSense', function(message) {\n              $('#GDA-GDA_output_sense').empty();\n            });\"\n            ),\n\n           fluidRow(\n\n             box(\n               textInput(NS(id, \"GDA_H0\"), \"Host conc.\", value = 0),\n               textInput(NS(id, \"GDA_G0\"), \"Guest conc.\", value = \"0\"),\n               textInput(NS(id, \"GDA_kHD\"), \"kHD\", value = \"0\"),\n               numericInput(NS(id, \"GDA_npop\"), \"Number of particles\", value = 40),\n               numericInput(NS(id, \"GDA_ngen\"), \"Number of generations\", value = 200),\n               selectInput(NS(id, \"GDA_topology\"), \"Topology of particle swarm\",\n                 c(\"star\" = \"star\",\n                   \"random\" = \"random arbitrary neighberhood\"), selectize = FALSE),\n               numericInput(NS(id, \"GDA_threshold\"), \"Threshold of the error\", value = 0.00001),\n               width = 6,\n               title = \"Parameter\", solidHeader = TRUE,\n               status = \"warning\", height = 600\n              ),\n\n             box(\n               box(\n                 textInput(NS(id, \"GDA_kHD_lb\"), \"kHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"GDA_kHD_ub\"), \"kHD value upper boundary\", value = 1e09)\n                 ),\n               box(\n                 textInput(NS(id, \"GDA_I0_lb\"), \"I0 value lower boundary\", value = 0),\n                 textInput(NS(id, \"GDA_I0_ub\"), \"I0 value upper boundary\", value = 1)\n                 ),\n               box(\n                 textInput(NS(id, \"GDA_IHD_lb\"), \"IHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"GDA_IHD_ub\"), \"IHD value upper boundary\", value = 1e06)\n                 ),\n               box(\n                 textInput(NS(id, \"GDA_ID_lb\"), \"ID value lower boundary\", value = 0),\n                 textInput(NS(id, \"GDA_ID_ub\"), \"ID value upper boundary\", value = 1e06)\n                 ),\n               width = 6, title = \"Boundaries\", solidHeader = TRUE,\n               status = \"warning\", height = 600\n               )\n            ),\n\n           fluidRow(\n            tabBox(\n\n              tabPanel(\"Optimization\",\n                fluidRow(\n                 box(\n                  box(\n                   actionButton(NS(id, \"GDA_Start_Opti\"),\"Start Optimization\"),\n                   actionButton(NS(id, 'GDA_cancel'), 'Cancel'),\n                   actionButton(NS(id, 'GDA_status'), 'Get Status'),\n                   downloadButton(NS(id, \"GDA_download\"),\"Save result of optimization\"),\n                   verbatimTextOutput(NS(id, \"GDA_output\")),\n                   width = 12\n                   ),\n                  box(\n                   br(),\n                   DT::DTOutput(NS(id, \"GDA_params\")),\n                   DT::DTOutput(NS(id, \"GDA_metrices\")),\n                   plotOutput(NS(id, \"GDA_plot\")),\n                   width = 7, solidHeader = TRUE, status = \"warning\"\n                   ),\n                  width = 12, title = \"Optimization\", solidHeader = TRUE,\n                  collapsible = TRUE, status = \"warning\"\n                  )\n                 )\n              ),\n\n              tabPanel(\"Sensitivity analysis\",\n                fluidRow(\n                 box(\n                   box(\n                     numericInput(NS(id, \"GDA_sens_bounds\"), \"+/- boundary in [%]\", value = 15),\n                     actionButton(NS(id, \"GDA_Start_Sensi\"),\"Start Sensitivity analysis\"),\n                     actionButton(NS(id, 'GDA_cancel_sense'), 'Cancel'),\n                     actionButton(NS(id, 'GDA_status_sense'), 'Get Status'),\n                     downloadButton(NS(id, \"GDA_sensi_download\"), \"Save result of sensitivity analysis\"),\n                     verbatimTextOutput(NS(id, \"GDA_output_sense\")),\n                     width = 12\n                     ),\n                   box(\n                     br(),\n                     plotOutput(NS(id, \"GDA_sensi\")),\n                     width = 7, solidHeader = TRUE, status = \"warning\"\n                     ),\n                   width = 12, title = \"Sensitivity analysis\", solidHeader = TRUE,\n                   collapsible = TRUE, status = \"warning\"\n                   )\n                 )\n              ),\n\n              width = 12\n              )\n            )\n\n           \n    )\n}\n\n\n\ngdaServer <- function(id, df, com, com_sense, nclicks, nclicks_sense) {\n\n  moduleServer(id, function(input, output, session) {  \n\n  result_val <- reactiveVal()\n  result_val_sense <- reactiveVal()\n\n  observeEvent(input$GDA_Start_Opti, {\n    if(nclicks() != 0 | nclicks_sense() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    session$sendCustomMessage(type = \"GDAclearField\", list(message = NULL))\n    nclicks(nclicks() + 1)\n    result_val(data.frame(Status=\"Running...\"))\n    com$running()\n    session$sendCustomMessage(type = \"GDAclearField\", list(message = NULL, arg = 1))\n    req(input$GDA_H0); req(input$GDA_G0)\n    req(input$GDA_kHD); req(input$GDA_npop); req(input$GDA_ngen)\n    req(input$GDA_threshold); req(input$GDA_kHD_lb); req(input$GDA_kHD_ub)\n    req(input$GDA_IHD_lb); req(input$GDA_IHD_ub); req(input$GDA_ID_lb)\n    req(input$GDA_ID_ub); req(input$GDA_I0_lb); req(input$GDA_I0_ub)\n    lb <- c(input$GDA_kHD_lb, input$GDA_I0_lb, input$GDA_IHD_lb, input$GDA_ID_lb) \n    lb <- convertToNum(lb)\n    req(!(\"Error\" %in% lb))\n    ub <- c(input$GDA_kHD_ub, input$GDA_I0_ub, input$GDA_IHD_ub, input$GDA_ID_ub)\n    ub <- convertToNum(ub)\n    req(!(\"Error\" %in% ub))\n    additionalParameters <- c(input$GDA_H0, input$GDA_G0, input$GDA_kHD) \n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    npop <- input$GDA_npop\n    ngen <- input$GDA_ngen\n    topo <- input$GDA_topology\n    et <- input$GDA_threshold\n\n    result <- future({\n      opti(\"gda\", lb, ub, df, additionalParameters,\n            npop, ngen, topo, et, com)\n    }, seed = TRUE) \n    promises::`%...>%`(result, result_val())\n    result <- catch(result,\n                    function(e){\n                      result_val(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result <- finally(result,\n                      function(){\n                        com$ready()\n                        nclicks(0)\n                      })\n    \n    NULL\n  })\n  observeEvent(input$GDA_cancel,{\n    com$interrupt()\n  })\n  observeEvent(input$GDA_status, {\n    req(nclicks() != 0)\n    session$sendCustomMessage(type = \"GDAupdateField\",\n     list(message = com$getData()))\n  })\n  output$GDA_params <- renderDT({\n    req(length(result_val()) == 4)\n    req(!is.null(result_val()[[2]]))\n    result_val()[[2]]\n  })\n  output$GDA_plot <- renderPlot({\n    req(length(result_val()) == 4)\n    req(!is.null(result_val()[[3]]))\n    result_val()[[3]]\n  })\n  output$GDA_metrices <- renderDT({\n    req(length(result_val()) == 4)\n    req(!is.null(result_val()[[4]]))\n    as.data.frame(result_val()[[4]])\n  })\n  output$GDA_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n      req(length(result_val()) == 4)\n\n        wb <- openxlsx::createWorkbook()\n        addWorksheet(wb, \"Results\")\n        curr_row <- 1\n        curr_val <- result_val()[[1]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[2]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- as.data.frame(result_val()[[4]])\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[3]]\n        tempfile_plot <- tempfile(fileext = \".png\")\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n        openxlsx::saveWorkbook(wb, file)\n        unlink(tempfile_plot)\n    }\n  )\n\n\n\n  observeEvent(input$GDA_Start_Sensi, {\n    if(nclicks_sense() != 0 | nclicks() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    nclicks_sense(nclicks_sense() + 1)\n    result_val_sense(data.frame(Status=\"Running...\"))\n    session$sendCustomMessage(type = \"GDAclearFieldSense\", list(message = NULL, arg = 1))\n    com_sense$running()\n    req(input$GDA_H0); req(input$GDA_G0)\n    req(input$GDA_kHD); req(input$GDA_sens_bounds); req(length(result_val()) == 4)\n    additionalParameters <- c(input$GDA_H0, input$GDA_G0, input$GDA_kHD) \n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    optim_params <- result_val()[[2]]\n    sense_bounds <- input$GDA_sens_bounds\n    result_sense <- future({\n      sensitivity(\"gda\", optim_params, df, additionalParameters,\n                        sense_bounds, runAsShiny = com_sense)\n    }, seed = TRUE) \n    promises::`%...>%`(result_sense, result_val_sense())\n    result_sense <- catch(result_sense,\n                    function(e){\n                      result_val_sense(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result_sense <- finally(result_sense,\n                      function(){\n                        com_sense$ready() \n                        nclicks_sense(0)\n                      })\n    NULL\n  })\n  observeEvent(input$GDA_cancel_sense,{\n    com_sense$interrupt()\n  })\n  observeEvent(input$GDA_status_sense, {\n    req(nclicks_sense() != 0)\n    session$sendCustomMessage(type = \"GDAupdateFieldSense\",\n                   list(message = com_sense$getStatus() ))\n  })\n  output$GDA_sensi <- renderPlot({\n    req(inherits(result_val_sense(), \"ggplot\")) \n    result_val_sense()\n  })\n  output$GDA_sensi_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      tempfile_plot <- tempfile(fileext = \".png\")\n      if(inherits(result_val_sense(), \"ggplot\")) {\n        curr_val <- result_val_sense()\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = 1)\n      }\n      openxlsx::saveWorkbook(wb, file)\n      unlink(tempfile_plot)\n    }\n  )\n\n\n  })\n}","type":"text"},{"name":"HG_App.R","content":"hgUI <- function(id) {\n\ttabItem(\n           tabName = \"HG\",\n           tags$script(\n            \"Shiny.addCustomMessageHandler('HGupdateField', function(message) {\n              var result = message.message;\n              $('#HG-HG_output').append(result + '\\\\n');\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('HGclearField', function(message) {\n              $('#HG-HG_output').empty();\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('HGupdateFieldSense', function(message) {\n              var result = message.message;\n              $('#HG-HG_output_sense').html(result);\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('HGclearFieldSense', function(message) {\n              $('#HG-HG_output_sense').empty();\n            });\"\n            ),\n\n\n\n           fluidRow(\n\n             box(\n               textInput(NS(id, \"HG_H0\"), \"Host conc.\", value = 0),\n               numericInput(NS(id, \"HG_npop\"), \"Number of particles\", value = 40),\n               numericInput(NS(id, \"HG_ngen\"), \"Number of generations\", value = 200),\n               selectInput(NS(id, \"HG_topology\"), \"Topology of particle swarm\",\n                 c(\"star\" = \"star\",\n                   \"random\" = \"random arbitrary neighberhood\"), selectize = FALSE),\n               numericInput(NS(id, \"HG_threshold\"), \"Threshold of the error\", value = 0.00001),\n               width = 6,\n               title = \"Parameter\", solidHeader = TRUE,\n               status = \"warning\", height = 450\n              ),\n\n             box(\n               box(\n                 textInput(NS(id, \"HG_kHD_lb\"), \"kHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"HG_kHD_ub\"), \"kHD value upper boundary\", value = 1e09)\n                 ),\n               box(\n                 textInput(NS(id, \"HG_I0_lb\"), \"I0 value lower boundary\", value = 0),\n                 textInput(NS(id, \"HG_I0_ub\"), \"I0 value upper boundary\", value = 1)\n                 ),\n               box(\n                 textInput(NS(id, \"HG_IHD_lb\"), \"IHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"HG_IHD_ub\"), \"IHD value upper boundary\", value = 1e06)\n                 ),\n               box(\n                 textInput(NS(id, \"HG_ID_lb\"), \"ID value lower boundary\", value = 0),\n                 textInput(NS(id, \"HG_ID_ub\"), \"ID value upper boundary\", value = 1e06)\n                 ),\n               width = 6, title = \"Boundaries\", solidHeader = TRUE,\n               status = \"warning\", height = 450\n               )\n            ),\n\n           fluidRow(\n            tabBox(\n\n              tabPanel(\"Optimization\",\n                fluidRow(\n                 box(\n                  box(\n                   actionButton(NS(id, \"HG_Start_Opti\"),\"Start Optimization\"),\n                   actionButton(NS(id, 'HG_cancel'), 'Cancel'),\n                   actionButton(NS(id, 'HG_status'), 'Get Status'),\n                   downloadButton(NS(id, \"HG_download\"),\"Save result of optimization\"),\n                   verbatimTextOutput(NS(id, \"HG_output\")),\n                   width = 12\n                   ),\n                  box(\n                   br(),\n                   DT::DTOutput(NS(id, \"HG_params\")),\n                   DT::DTOutput(NS(id, \"HG_metrices\")),\n                   plotOutput(NS(id, \"HG_plot\")),\n                   width = 7, solidHeader = TRUE, status = \"warning\"\n                   ),\n                  width = 12, title = \"Optimization\", solidHeader = TRUE,\n                  collapsible = TRUE, status = \"warning\"\n                  )\n                 )\n              ),\n\n              tabPanel(\"Sensitivity analysis\",\n                fluidRow(\n                 box(\n                   box(\n                     numericInput(NS(id, \"HG_sens_bounds\"), \"+/- boundary in [%]\", value = 15),\n                     actionButton(NS(id, \"HG_Start_Sensi\"),\"Start Sensitivity analysis\"),\n                     actionButton(NS(id, 'HG_cancel_sense'), 'Cancel'),\n                     actionButton(NS(id, 'HG_status_sense'), 'Get Status'),\n                     downloadButton(NS(id, \"HG_sensi_download\"), \"Save result of sensitivity analysis\"),\n                     verbatimTextOutput(NS(id, \"HG_output_sense\")),\n                     width = 12\n                     ),\n                   box(\n                     br(),\n                     plotOutput(NS(id, \"HG_sensi\")),\n                     width = 7, solidHeader = TRUE, status = \"warning\"\n                     ),\n                   width = 12, title = \"Sensitivity analysis\", solidHeader = TRUE,\n                   collapsible = TRUE, status = \"warning\"\n                   )\n                 )\n              ),\n\n              width = 12\n              )\n            )\n\n           \n    )\n}\n\n\n\nhgServer <- function(id, df, com, com_sense, nclicks, nclicks_sense) {\n\n  moduleServer(id, function(input, output, session) {  \n  \n  result_val <- reactiveVal()\n  result_val_sense <- reactiveVal()\n\n  observeEvent(input$HG_Start_Opti, {\n    if(nclicks() != 0 | nclicks_sense() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    session$sendCustomMessage(type = \"HGclearField\", list(message = NULL))\n\n    nclicks(nclicks() + 1)\n    result_val(data.frame(Status=\"Running...\"))\n    com$running()\n    session$sendCustomMessage(type = \"HGclearField\", list(message = NULL, arg = 1))\n    req(input$HG_H0); req(input$HG_npop); req(input$HG_ngen)\n    req(input$HG_threshold); req(input$HG_kHD_lb); req(input$HG_kHD_ub)\n    req(input$HG_IHD_lb); req(input$HG_IHD_ub); req(input$HG_ID_lb)\n    req(input$HG_ID_ub); req(input$HG_I0_lb); req(input$HG_I0_ub)\n    lb <- c(input$HG_kHD_lb, input$HG_I0_lb, input$HG_IHD_lb, input$HG_ID_lb) \n    lb <- convertToNum(lb)\n    req(!(\"Error\" %in% lb))\n    ub <- c(input$HG_kHD_ub, input$HG_I0_ub, input$HG_IHD_ub, input$HG_ID_ub)\n    ub <- convertToNum(ub)\n    req(!(\"Error\" %in% ub))\n    additionalParameters <- c(input$HG_H0)\n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    npop <- input$HG_npop\n    ngen <- input$HG_ngen\n    topo <- input$HG_topology\n    et <- input$HG_threshold\n    result <- future({\n      opti(\"hg\", lb, ub, df, additionalParameters,\n            npop, ngen, topo, et, com)\n    }, seed = TRUE) \n    promises::`%...>%`(result, result_val())\n    result <- catch(result,\n                    function(e){\n                      result_val(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result <- finally(result,\n                      function(){\n                        com$ready()\n                        nclicks(0)\n                      })\n    \n    NULL\n  })\n  observeEvent(input$HG_cancel,{\n    com$interrupt()\n  })\n  observeEvent(input$HG_status, {\n    req(nclicks() != 0)\n    session$sendCustomMessage(type = \"HGupdateField\",\n     list(message = com$getData()))\n  })\n  output$HG_params <- renderDT({\n    req(length(result_val()) == 4)\n    req(!is.null(result_val()[[2]]))\n    result_val()[[2]]\n  })\n  output$HG_plot <- renderPlot({\n  \treq(length(result_val()) == 4)\n    req(!is.null(result_val()[[3]]))\n    result_val()[[3]]\n  })\n  output$HG_metrices <- renderDT({\n  \treq(length(result_val()) == 4)\n    req(!is.null(result_val()[[4]]))\n    as.data.frame(result_val()[[4]])\n  })\n  output$HG_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n    \treq(length(result_val()) == 4)\n\n        wb <- openxlsx::createWorkbook()\n        addWorksheet(wb, \"Results\")\n        curr_row <- 1\n        curr_val <- result_val()[[1]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[2]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- as.data.frame(result_val()[[4]])\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[3]]\n        tempfile_plot <- tempfile(fileext = \".png\")\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n        openxlsx::saveWorkbook(wb, file)\n        unlink(tempfile_plot)\n    }\n  )\n\n\n\n  observeEvent(input$HG_Start_Sensi, {\n    if(nclicks_sense() != 0 | nclicks() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    nclicks_sense(nclicks_sense() + 1)\n    result_val_sense(data.frame(Status=\"Running...\"))\n    session$sendCustomMessage(type = \"HGclearFieldSense\", list(message = NULL, arg = 1))\n    com_sense$running()\n    req(input$HG_H0); req(input$HG_sens_bounds); req(length(result_val()) == 4)\n    additionalParameters <- c(input$HG_H0)\n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    optim_params <- result_val()[[2]]\n    sense_bounds <- input$HG_sens_bounds\n    result_sense <- future({\n      sensitivity(\"hg\", optim_params, df, additionalParameters,\n                        sense_bounds, runAsShiny = com_sense)\n    }, seed = TRUE) \n    promises::`%...>%`(result_sense, result_val_sense())\n    result_sense <- catch(result_sense,\n                    function(e){\n                      result_val_sense(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result_sense <- finally(result_sense,\n                      function(){\n                        com_sense$ready() \n                        nclicks_sense(0)\n                      })\n    NULL\n  })\n  observeEvent(input$HG_cancel_sense,{\n    com_sense$interrupt()\n  })\n  observeEvent(input$HG_status_sense, {\n    req(nclicks_sense() != 0)\n    session$sendCustomMessage(type = \"HGupdateFieldSense\",\n                   list(message = com_sense$getStatus() ))\n  })\n  output$HG_sensi <- renderPlot({\n    req(inherits(result_val_sense(), \"ggplot\")) \n    result_val_sense()\n  })\n  output$HG_sensi_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      tempfile_plot <- tempfile(fileext = \".png\")\n      if(inherits(result_val_sense(), \"ggplot\")) {\n        curr_val <- result_val_sense()\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = 1)\n      }\n      openxlsx::saveWorkbook(wb, file)\n      unlink(tempfile_plot)\n    }\n  )\n\n\n\t})\n}","type":"text"},{"name":"IDA_App.R","content":"idaUI <- function(id) {\n\ttabItem(\n           tabName = \"IDA\",\n           tags$script(\n            \"Shiny.addCustomMessageHandler('IDAupdateField', function(message) {\n              var result = message.message;\n              $('#IDA-IDA_output').append(result + '\\\\n');\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('IDAclearField', function(message) {\n              $('#IDA-IDA_output').empty();\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('IDAupdateFieldSense', function(message) {\n              var result = message.message;\n              $('#IDA-IDA_output_sense').html(result);\n            });\"\n            ),\n           tags$script(\n            \"Shiny.addCustomMessageHandler('IDAclearFieldSense', function(message) {\n              $('#IDA-IDA_output_sense').empty();\n            });\"\n            ),\n\n           fluidRow(\n\n             box(\n               textInput(NS(id, \"IDA_H0\"), \"Host conc.\", value = 0),\n               textInput(NS(id, \"IDA_D0\"), \"Dye conc.\", value = \"0\"),\n               textInput(NS(id, \"IDA_kHD\"), \"kHD\", value = \"0\"),\n               numericInput(NS(id, \"IDA_npop\"), \"Number of particles\", value = 40),\n               numericInput(NS(id, \"IDA_ngen\"), \"Number of generations\", value = 200),\n               selectInput(NS(id, \"IDA_topology\"), \"Topology of particle swarm\",\n                 c(\"star\" = \"star\",\n                   \"random\" = \"random arbitrary neighberhood\"), selectize = FALSE),\n               numericInput(NS(id, \"IDA_threshold\"), \"Threshold of the error\", value = 0.00001),\n               width = 6,\n               title = \"Parameter\", solidHeader = TRUE,\n               status = \"warning\", height = 600\n              ),\n\n             box(\n               box(\n                 textInput(NS(id, \"IDA_kHD_lb\"), \"kHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"IDA_kHD_ub\"), \"kHD value upper boundary\", value = 1e09)\n                 ),\n               box(\n                 textInput(NS(id, \"IDA_I0_lb\"), \"I0 value lower boundary\", value = 0),\n                 textInput(NS(id, \"IDA_I0_ub\"), \"I0 value upper boundary\", value = 1)\n                 ),\n               box(\n                 textInput(NS(id, \"IDA_IHD_lb\"), \"IHD value lower boundary\", value = 0),\n                 textInput(NS(id, \"IDA_IHD_ub\"), \"IHD value upper boundary\", value = 1e06)\n                 ),\n               box(\n                 textInput(NS(id, \"IDA_ID_lb\"), \"ID value lower boundary\", value = 0),\n                 textInput(NS(id, \"IDA_ID_ub\"), \"ID value upper boundary\", value = 1e06)\n                 ),\n               width = 6, title = \"Boundaries\", solidHeader = TRUE,\n               status = \"warning\", height = 600\n               )\n            ),\n\n           fluidRow(\n            tabBox(\n\n              tabPanel(\"Optimization\",\n                fluidRow(\n                 box(\n                  box(\n                   actionButton(NS(id, \"IDA_Start_Opti\"),\"Start Optimization\"),\n                   actionButton(NS(id, 'IDA_cancel'), 'Cancel'),\n                   actionButton(NS(id, 'IDA_status'), 'Get Status'),\n                   downloadButton(NS(id, \"IDA_download\"),\"Save result of optimization\"),\n                   verbatimTextOutput(NS(id, \"IDA_output\")),\n                   width = 12\n                   ),\n                  box(\n                   br(),\n                   DT::DTOutput(NS(id, \"IDA_params\")),\n                   DT::DTOutput(NS(id, \"IDA_metrices\")),\n                   plotOutput(NS(id, \"IDA_plot\")),\n                   width = 7, solidHeader = TRUE, status = \"warning\"\n                   ),\n                  width = 12, title = \"Optimization\", solidHeader = TRUE,\n                  collapsible = TRUE, status = \"warning\"\n                  )\n                 )\n              ),\n\n              tabPanel(\"Sensitivity analysis\",\n                fluidRow(\n                 box(\n                   box(\n                     numericInput(NS(id, \"IDA_sens_bounds\"), \"+/- boundary in [%]\", value = 15),\n                     actionButton(NS(id, \"IDA_Start_Sensi\"),\"Start Sensitivity analysis\"),\n                     actionButton(NS(id, 'IDA_cancel_sense'), 'Cancel'),\n                     actionButton(NS(id, 'IDA_status_sense'), 'Get Status'),\n                     downloadButton(NS(id, \"IDA_sensi_download\"), \"Save result of sensitivity analysis\"),\n                     verbatimTextOutput(NS(id, \"IDA_output_sense\")),\n                     width = 12\n                     ),\n                   box(\n                     br(),\n                     plotOutput(NS(id, \"IDA_sensi\")),\n                     width = 7, solidHeader = TRUE, status = \"warning\"\n                     ),\n                   width = 12, title = \"Sensitivity analysis\", solidHeader = TRUE,\n                   collapsible = TRUE, status = \"warning\"\n                   )\n                 )\n              ),\n\n              width = 12\n              )\n            )\n\n           \n    )\n}\n\n\n\nidaServer <- function(id, df, com, com_sense, nclicks, nclicks_sense) {\n\n  moduleServer(id, function(input, output, session) {  \n  \n  result_val <- reactiveVal()\n  result_val_sense <- reactiveVal()\n\n  observeEvent(input$IDA_Start_Opti, {\n    if(nclicks() != 0 | nclicks_sense() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    session$sendCustomMessage(type = \"IDAclearField\", list(message = NULL))\n    nclicks(nclicks() + 1)\n    result_val(data.frame(Status=\"Running...\"))\n    com$running()\n    session$sendCustomMessage(type = \"IDAclearField\", list(message = NULL, arg = 1))\n    req(input$IDA_H0); req(input$IDA_D0)\n    req(input$IDA_kHD); req(input$IDA_npop); req(input$IDA_ngen)\n    req(input$IDA_threshold); req(input$IDA_kHD_lb); req(input$IDA_kHD_ub)\n    req(input$IDA_IHD_lb); req(input$IDA_IHD_ub); req(input$IDA_ID_lb)\n    req(input$IDA_ID_ub); req(input$IDA_I0_lb); req(input$IDA_I0_ub)\n    lb <- c(input$IDA_kHD_lb, input$IDA_I0_lb, input$IDA_IHD_lb, input$IDA_ID_lb) \n    lb <- convertToNum(lb)\n    req(!(\"Error\" %in% lb))\n    ub <- c(input$IDA_kHD_ub, input$IDA_I0_ub, input$IDA_IHD_ub, input$IDA_ID_ub)\n    ub <- convertToNum(ub)\n    req(!(\"Error\" %in% ub))\n    additionalParameters <- c(input$IDA_H0, input$IDA_D0, input$IDA_kHD) \n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    npop <- input$IDA_npop\n    ngen <- input$IDA_ngen\n    topo <- input$IDA_topology\n    et <- input$IDA_threshold\n    result <- future({\n      opti(\"ida\", lb, ub, df, additionalParameters,\n            npop, ngen, topo, et, com)\n    }, seed = TRUE) \n    promises::`%...>%`(result, result_val())\n    result <- catch(result,\n                    function(e){\n                      result_val(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result <- finally(result,\n                      function(){\n                        com$ready()\n                        nclicks(0)\n                      })\n    \n    NULL\n  })\n  observeEvent(input$IDA_cancel,{\n    com$interrupt()\n  })\n  observeEvent(input$IDA_status, {\n    req(nclicks() != 0)\n    session$sendCustomMessage(type = \"IDAupdateField\",\n     list(message = com$getData()))\n  })\n  output$IDA_params <- renderDT({\n    req(length(result_val()) == 4)\n    req(!is.null(result_val()[[2]]))\n    result_val()[[2]]\n  })\n  output$IDA_plot <- renderPlot({\n  \treq(length(result_val()) == 4)\n    req(!is.null(result_val()[[3]]))\n    result_val()[[3]]\n  })\n  output$IDA_metrices <- renderDT({\n  \treq(length(result_val()) == 4)\n    req(!is.null(result_val()[[4]]))\n    as.data.frame(result_val()[[4]])\n  })\n  output$IDA_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n    \treq(length(result_val()) == 4)\n\n        wb <- openxlsx::createWorkbook()\n        addWorksheet(wb, \"Results\")\n        curr_row <- 1\n        curr_val <- result_val()[[1]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[2]]\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- as.data.frame(result_val()[[4]])\n        writeData(wb, \"Results\", curr_val, startRow = curr_row)\n        curr_row <- curr_row + dim(curr_val)[1] + 5\n        \n        curr_val <- result_val()[[3]]\n        tempfile_plot <- tempfile(fileext = \".png\")\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = curr_row)\n        openxlsx::saveWorkbook(wb, file)\n        unlink(tempfile_plot)\n    }\n  )\n\n\n\n  observeEvent(input$IDA_Start_Sensi, {\n    if(nclicks_sense() != 0 | nclicks() != 0){\n      showNotification(\"Already running analysis\")\n      return(NULL)\n    }\n    nclicks_sense(nclicks_sense() + 1)\n    result_val_sense(data.frame(Status=\"Running...\"))\n    session$sendCustomMessage(type = \"IDAclearFieldSense\", list(message = NULL, arg = 1))\n    com_sense$running()\n    req(input$IDA_H0); req(input$IDA_D0)\n    req(input$IDA_kHD); req(input$IDA_sens_bounds); req(length(result_val()) == 4)\n    additionalParameters <- c(input$IDA_H0, input$IDA_D0, input$IDA_kHD) \n    additionalParameters <- convertToNum(additionalParameters)\n    req(!(\"Error\" %in% additionalParameters))\n    optim_params <- result_val()[[2]]\n    sense_bounds <- input$IDA_sens_bounds\n    result_sense <- future({\n      sensitivity(\"ida\", optim_params, df, additionalParameters,\n                        sense_bounds, runAsShiny = com_sense)\n    }, seed = TRUE) \n    promises::`%...>%`(result_sense, result_val_sense())\n    result_sense <- catch(result_sense,\n                    function(e){\n                      result_val_sense(NULL)\n                      print(e$message)\n                      showNotification(e$message, duration = 0)\n                    })\n    result_sense <- finally(result_sense,\n                      function(){\n                        com_sense$ready() \n                        nclicks_sense(0)\n                      })\n    NULL\n  })\n  observeEvent(input$IDA_cancel_sense,{\n    com_sense$interrupt()\n  })\n  observeEvent(input$IDA_status_sense, {\n    req(nclicks_sense() != 0)\n    session$sendCustomMessage(type = \"IDAupdateFieldSense\",\n                   list(message = com_sense$getStatus() ))\n  })\n  output$IDA_sensi <- renderPlot({\n    req(inherits(result_val_sense(), \"ggplot\")) \n    result_val_sense()\n  })\n  output$IDA_sensi_download <- downloadHandler(\n    filename = function() {\n      \"result.xlsx\"\n    },\n    content = function(file) {\n      wb <- openxlsx::createWorkbook()\n      addWorksheet(wb, \"Results\")\n      tempfile_plot <- tempfile(fileext = \".png\")\n      if(inherits(result_val_sense(), \"ggplot\")) {\n        curr_val <- result_val_sense()\n        ggsave(tempfile_plot,\n               plot = curr_val, width = 10, height = 6) \n        insertImage(wb, \"Results\", tempfile_plot, startRow = 1)\n      }\n      openxlsx::saveWorkbook(wb, file)\n      unlink(tempfile_plot)\n    }\n  )\n\n\n\t})\n}","type":"text"}]
