% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/communicator.R
\name{Communicator}
\alias{Communicator}
\title{Communicator class}
\description{
a class for communicating via a temporary file
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{file}}{is a file which contains the current status}

\item{\code{result}}{is a file in which data can be written or read information.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Communicator-new}{\code{Communicator$new()}}
\item \href{#method-Communicator-getStatus}{\code{Communicator$getStatus()}}
\item \href{#method-Communicator-setStatus}{\code{Communicator$setStatus()}}
\item \href{#method-Communicator-setData}{\code{Communicator$setData()}}
\item \href{#method-Communicator-getData}{\code{Communicator$getData()}}
\item \href{#method-Communicator-interrupt}{\code{Communicator$interrupt()}}
\item \href{#method-Communicator-ready}{\code{Communicator$ready()}}
\item \href{#method-Communicator-running}{\code{Communicator$running()}}
\item \href{#method-Communicator-isInterrupted}{\code{Communicator$isInterrupted()}}
\item \href{#method-Communicator-destroy}{\code{Communicator$destroy()}}
\item \href{#method-Communicator-clone}{\code{Communicator$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-new"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-new}{}}}
\subsection{Method \code{new()}}{
create a new Communicator Object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-getStatus"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-getStatus}{}}}
\subsection{Method \code{getStatus()}}{
get the current status
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$getStatus()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-setStatus"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-setStatus}{}}}
\subsection{Method \code{setStatus()}}{
write a status to the status file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$setStatus(msg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{is the message which should be set in the file}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-setData"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-setData}{}}}
\subsection{Method \code{setData()}}{
write data to the result file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$setData(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{is a string which should be written to the result file}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-getData"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-getData}{}}}
\subsection{Method \code{getData()}}{
get the current data from the result file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$getData()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-interrupt"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-interrupt}{}}}
\subsection{Method \code{interrupt()}}{
set the status to "interrupt"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$interrupt()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-ready"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-ready}{}}}
\subsection{Method \code{ready()}}{
set the status to "ready"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$ready()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-running"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-running}{}}}
\subsection{Method \code{running()}}{
write a status to the status file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$running(percComplete)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{percComplete}}{is the message which should be set in the file.
If percComplete is not passed than the message is set to "Running..."}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-isInterrupted"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-isInterrupted}{}}}
\subsection{Method \code{isInterrupted()}}{
Checks if the current status is "interrupt"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$isInterrupted()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-destroy"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-destroy}{}}}
\subsection{Method \code{destroy()}}{
removes the temporary files.
\strong{This method has to be called at the end of the lifetime of the object!}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$destroy()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Communicator-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Communicator-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Communicator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
